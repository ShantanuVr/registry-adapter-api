name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: registry_adapter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Generate Prisma client
      run: pnpm db:generate
    
    - name: Run database migrations
      run: pnpm db:migrate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/registry_adapter_test?schema=public
    
    - name: Run linting
      run: pnpm lint
    
    - name: Run type checking
      run: pnpm typecheck
    
    - name: Run unit tests
      run: pnpm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/registry_adapter_test?schema=public
        NODE_ENV: test
    
    - name: Run E2E tests
      run: pnpm test:e2e
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/registry_adapter_test?schema=public
        NODE_ENV: test
    
    - name: Generate coverage report
      run: pnpm test:coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/registry_adapter_test?schema=public
        NODE_ENV: test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Generate Prisma client
      run: pnpm db:generate
    
    - name: Build application
      run: pnpm build
    
    - name: Build Docker image
      run: docker build -t registry-adapter-api:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 4100:4100 \
          -e DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test" \
          -e JWT_JWKS_URL="http://localhost:3000/.well-known/jwks.json" \
          -e JWT_ISSUER="https://registry.example.com" \
          -e CHAIN_RPC_URL="http://localhost:8545" \
          -e CHAIN_ID="31337" \
          -e SIGNER_PRIV="0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80" \
          -e TOKENS_CREDIT1155_ADDR="0x5FbDB2315678afecb367f032d93F642f64180aa3" \
          -e EVIDENCE_ANCHOR_ADDR="0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512" \
          registry-adapter-api:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:4100/health || exit 1
        
        # Cleanup
        docker stop test-container

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
